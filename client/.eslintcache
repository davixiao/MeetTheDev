[{"/Users/huogenx/Desktop/devconnector/client/src/index.js":"1","/Users/huogenx/Desktop/devconnector/client/src/App.js":"2","/Users/huogenx/Desktop/devconnector/client/src/components/layout/Navbar.js":"3","/Users/huogenx/Desktop/devconnector/client/src/components/layout/Landing.js":"4","/Users/huogenx/Desktop/devconnector/client/src/components/auth/Login.js":"5","/Users/huogenx/Desktop/devconnector/client/src/components/auth/Register.js":"6","/Users/huogenx/Desktop/devconnector/client/src/store.js":"7","/Users/huogenx/Desktop/devconnector/client/src/reducers/index.js":"8","/Users/huogenx/Desktop/devconnector/client/src/reducers/alert.js":"9","/Users/huogenx/Desktop/devconnector/client/src/actions/types.js":"10","/Users/huogenx/Desktop/devconnector/client/src/actions/alert.js":"11","/Users/huogenx/Desktop/devconnector/client/src/components/layout/Alert.js":"12"},{"size":197,"mtime":1609389219584,"results":"13","hashOfConfig":"14"},{"size":1254,"mtime":1609452321367,"results":"15","hashOfConfig":"14"},{"size":525,"mtime":1609392296321,"results":"16","hashOfConfig":"14"},{"size":741,"mtime":1609392386633,"results":"17","hashOfConfig":"14"},{"size":1732,"mtime":1609395251451,"results":"18","hashOfConfig":"14"},{"size":3624,"mtime":1609453708486,"results":"19","hashOfConfig":"14"},{"size":596,"mtime":1609444417297,"results":"20","hashOfConfig":"14"},{"size":116,"mtime":1609452924925,"results":"21","hashOfConfig":"14"},{"size":595,"mtime":1609454837309,"results":"22","hashOfConfig":"14"},{"size":82,"mtime":1609445805957,"results":"23","hashOfConfig":"14"},{"size":1684,"mtime":1609454974444,"results":"24","hashOfConfig":"14"},{"size":1276,"mtime":1609454575426,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"112e9js",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/huogenx/Desktop/devconnector/client/src/index.js",[],["53","54"],"/Users/huogenx/Desktop/devconnector/client/src/App.js",[],"/Users/huogenx/Desktop/devconnector/client/src/components/layout/Navbar.js",[],"/Users/huogenx/Desktop/devconnector/client/src/components/layout/Landing.js",[],"/Users/huogenx/Desktop/devconnector/client/src/components/auth/Login.js",["55"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nexport const Login = () => {\n  // formData is where we store the state.\n  // SetFormData is a function that takes in values and changes formData to those values\n  // inside the useState, we have an initial value of what is in the state.\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n\n  const { email, password } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault(); // stops the thing from doing what it does default. In this case, prevents it from\n    // submitting the form\n    console.log('SUCCESS');\n  };\n  return (\n    <>\n      <h1 className='large text-primary'>Sign In</h1>\n      <p className='lead'>\n        <i className='fas fa-user'></i> Sign Into Your Account\n      </p>\n      <form className='form' onSubmit={onSubmit}>\n        <div className='form-group'>\n          <input\n            type='email'\n            placeholder='Email Address'\n            name='email'\n            value={email}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className='form-group'>\n          <input\n            type='password'\n            placeholder='Password'\n            name='password'\n            minLength='6'\n            value={password}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <input type='submit' className='btn btn-primary' value='Login' />\n      </form>\n      <p className='my-1'>\n        Don't have an account? <Link to='/Register'>Sign Up</Link>\n      </p>\n    </>\n  );\n};\n","/Users/huogenx/Desktop/devconnector/client/src/components/auth/Register.js",["56"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { setAlert } from '../../actions/alert';\nimport PropTypes from 'prop-types';\n\n// instead of props.setAlert\nconst Register = ({ setAlert }) => {\n  // formData is where we store the state.\n  // SetFormData is a function that takes in values and changes formData to those values\n  // inside the useState, we have an initial value of what is in the state.\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    password2: '',\n  });\n\n  const { name, email, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault(); // stops the thing from doing what it does default. In this case, prevents it from\n    // submitting the form\n    if (password !== password2) {\n      setAlert('Passwords do not match', 'danger');\n    } else {\n      console.log('success');\n      /*\n      without redux, we can do this:\n      const newUser = {\n        name,\n        email,\n        password,\n      };\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        };\n\n        const body = JSON.stringify(newUser); // payload/body\n\n        const res = await axios.post('/api/users', body, config); // we have proxy, so no need for localhost:5000 instead of 3000.\n        console.log(res.data);\n      } catch (err) {\n        console.log(err.response.data);\n      }\n      */\n    }\n  };\n  return (\n    <>\n      <h1 className='large text-primary'>Sign Up</h1>\n      <p className='lead'>\n        <i className='fas fa-user'></i> Create Your Account\n      </p>\n      <form className='form' onSubmit={onSubmit}>\n        <div className='form-group'>\n          <input\n            type='text'\n            placeholder='Name'\n            name='name'\n            value={name}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className='form-group'>\n          <input\n            type='email'\n            placeholder='Email Address'\n            name='email'\n            value={email}\n            onChange={onChange}\n            required\n          />\n          <small className='form-text'>\n            This site uses Gravatar so if you want a profile image, use a\n            Gravatar email\n          </small>\n        </div>\n        <div className='form-group'>\n          <input\n            type='password'\n            placeholder='Password'\n            name='password'\n            minLength='6'\n            value={password}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <div className='form-group'>\n          <input\n            type='password'\n            placeholder='Confirm Password'\n            name='password2'\n            minLength='6'\n            value={password2}\n            onChange={onChange}\n            required\n          />\n        </div>\n        <input type='submit' className='btn btn-primary' value='Register' />\n      </form>\n      <p className='my-1'>\n        Already have an account? <Link to='/login'>Sign In</Link>\n      </p>\n    </>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n};\n\n// connects react and redux. first parameter puts the state into props. The second parameter puts\n// a list of action creators into props.\n// if you look above, connect allows us to access props.setAlert\nexport default connect(null, { setAlert })(Register);\n","/Users/huogenx/Desktop/devconnector/client/src/store.js",[],"/Users/huogenx/Desktop/devconnector/client/src/reducers/index.js",[],"/Users/huogenx/Desktop/devconnector/client/src/reducers/alert.js",[],"/Users/huogenx/Desktop/devconnector/client/src/actions/types.js",[],"/Users/huogenx/Desktop/devconnector/client/src/actions/alert.js",[],"/Users/huogenx/Desktop/devconnector/client/src/components/layout/Alert.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":13},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]